name: Build for release

on:
  workflow_dispatch:
  push:

jobs:
  linux:
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: ${{ github.event.repository.name }}
      PROJECT_BUILD_DIR: ${{ github.event.repository.name }}/build
      RAYLIB_PATH: ../raylib

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v3
        with:
          path: ${{ env.PROJECT_NAME }}

      # use latest version of raylib
      - name: Checkout raylib repo
        uses: actions/checkout@v3
        with:
          repository: raysan5/raylib
          path: raylib

      - name: Setup Environment
        run: |
          sudo apt update -qq
          sudo apt-get install -y --no-install-recommends libglfw3 libglfw3-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev

      - name: Build raylib
        run: |
          ls -l
          cd raylib/src
          make PLATFORM=PLATFORM_DESKTOP BUILD_MODE=RELEASE RAYLIB_LIBTYPE=STATIC

      - name: Build Project
        run: |
          ls -l
          cd ${{ env.PROJECT_NAME }}
          make PLATFORM=PLATFORM_DESKTOP
          
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}
          path: ${{ env.PROJECT_BUILD_DIR }}
          if-no-files-found: error
          retention-days: 30
          overwrite: true

  windows:
    runs-on: windows-latest

    env:
      PROJECT_NAME: ${{ github.event.repository.name }}
      PROJECT_BUILD_DIR: ${{ github.event.repository.name }}/build
      RAYLIB_PATH: ../raylib

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: ${{ env.PROJECT_NAME }}

      # use latest version of raylib
      - name: Checkout raylib repo
        uses: actions/checkout@v3
        with:
          repository: raysan5/raylib
          path: raylib

      - name: Setup MinGW-w64
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64
          version: 12.2.0

      - name: Build raylib
        run: |
          cd raylib/src
          make PLATFORM=PLATFORM_DESKTOP BUILD_MODE=RELEASE RAYLIB_LIBTYPE=STATIC

      - name: Build project
        run: |
          cd ${{ env.PROJECT_NAME }}
          mingw32-make PLATFORM=PLATFORM_DESKTOP
          
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}
          path: ${{ env.PROJECT_BUILD_DIR }}
          if-no-files-found: error
          retention-days: 30
          overwrite: true

  webassembly:
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: ${{ github.event.repository.name }}
      PROJECT_BUILD_DIR: ${{ github.event.repository.name }}/build
      RAYLIB_PATH: ../raylib
      EMSDK_PATH: $EMSDK

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          path: ${{ env.PROJECT_NAME }}

        # use latest version of raylib
      - name: Checkout raylib repo
        uses: actions/checkout@v3
        with:
          repository: raysan5/raylib
          path: raylib

      - name: Install Emscripten
        uses: mymindstorm/setup-emsdk@v13
        with:
          version: 3.1.50
          actions-cache-folder: "emsdk-cache"

      - name: Build raylib
        run: |
          cd raylib/src
          make PLATFORM=PLATFORM_WEB BUILD_MODE=RELEASE RAYLIB_LIBTYPE=STATIC

      - name: Build project
        run: |
          ls emsdk-cache
          emcc -v
          cd ${{ env.PROJECT_NAME }}
          make PLATFORM=PLATFORM_WEB
          
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}
          path: ${{ env.PROJECT_BUILD_DIR }}
          if-no-files-found: error
          retention-days: 30
          overwrite: true
